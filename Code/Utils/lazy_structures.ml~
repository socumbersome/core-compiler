type 'a llist = LNil | LCons of 'a * 'a llist Lazy.t;;
exception EmptyLazyList;;

let lhd = function
	| LNil -> raise EmptyLazyList
	| LCons(x, _) -> x;;

let ltl = function
	| LNil -> raise EmptyLazyList
	| LCons(_, lazy t) -> t;;

let rec lfrom k = LCons (k, lazy (lfrom (k+1)));;

let rec ltake = function
	| (0, _) -> []
	| (_, LNil) -> []
	| (n, LCons(x, lazy xs)) -> x::ltake(n - 1, xs);;


